INTRODUCTION TO DOUBLY LINKED LIST

QUESTION LINK: https://www.codingninjas.com/studio/problems/introduction-to-doubly-linked-list_8160413?leftPanelTabValue=PROBLEM

APPROACH

Implementation: We will take the use of a loop here. Initially, we will make a node with a value equal to the first element of the array ‘Arr’. This node’s ‘prev’ and ‘next’ will be initially assigned to ‘NULL’. Starting from the second element of the array, we will make a node with that value and will attach this node to the ‘next’ of the previous node, and at the same time, we will assign the ‘prev’ of the new node to be equal to the previous node. We will do this till the last element of the array. And at last, we will return the head node of the linked list.

// Function to implement Linked List From Array

function constructDLL(int[] arr, int n):

Int ‘n’ be the size of the array ‘arr’.
Create a node ‘head’, giving its value equal to arr[1]. Create another node, ‘temp’, initially assigned to ‘head’.
Iterate over the array ‘arr’ from index ‘2’ to index ‘n’:
Create a node ‘curNode’, giving its value equal to the current value of the array.
temp.next = curNode
curNode.prev = temp
temp = temp.next
Return ‘head’

Time Complexity: O( N ), Where 'N' is the size of array ‘arr’. We will traverse each array index once. Hence, the time complexity is O(N).

Space Complexity: O(N), Where 'N' is the size of array ‘arr’. We will take extra space for each element of the array. Hence, the space complexity is O(N).

C++ CODE

/*
 * Definition for doubly-linked list.
 * class Node
 * {
 * public:
 *    int data;
 *    Node *next, *prev;
 *    Node() : data(0), next(nullptr), prev(nullptr) {}
 *    Node(int x) : data(x), next(nullptr), prev(nullptr) {}
 *    Node(int x, Node *next, Node *prev) : data(x), next(next), prev(prev) {}
 * };
 */

/*
    Time Complexity: O( n ) 
    Space Complexity: O( n )

    where n is the number of elements in the array.
*/

#include<bits/stdc++.h>
using namespace std;
Node* constructDLL(vector<int>& arr) {
    // 'n' be the size of the array 'arr'
    int n = arr.size();
    // 'head' variable stores the head of the 
    // doubly linked list
    Node* head = new Node(arr[0]);
    Node* temp = head;
    for(int i = 1; i < n; ++i) {
        // Attach current node to the "next"
        // of the previous node
        Node* curNode = new Node(arr[i]);
        temp -> next = curNode;
        // Attach 'temp' to the previous of 'curNode'
        curNode -> prev = temp;
        temp = temp -> next;
    }
    return head;
}
